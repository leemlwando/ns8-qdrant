#!/usr/bin/env python3

#
# Copyright (C) 2023 Lee M. Lwando
# SPDX-License-Identifier: GPL-3.0-or-later
#

import json
import sys
import agent
import agent.tasks
import os

# Try to parse the stdin as JSON.
# If parsing fails, output everything to stderr
data = json.load(sys.stdin)

# Setup variables from user input
host = data.get('host', '')
path = data.get('path', '')
lets_encrypt = data.get('lets_encrypt', False)
http2https = data.get('http2https', False)
port = int(data.get('port', 6333))
api_key = data.get('api_key', '')
collection_size_limit = int(data.get('collection_size_limit', 10000))
enable_cors = data.get('enable_cors', True)

# Setup configuration from user input.
agent.set_env('QDRANT_HOST', host)
agent.set_env('QDRANT_PATH', path)
agent.set_env('QDRANT_LETS_ENCRYPT', str(lets_encrypt))
agent.set_env('QDRANT_HTTP2HTTPS', str(http2https))
agent.set_env('QDRANT_PORT', str(port))
agent.set_env('QDRANT_API_KEY', api_key)
agent.set_env('QDRANT_COLLECTION_SIZE_LIMIT', str(collection_size_limit))
agent.set_env('QDRANT_ENABLE_CORS', str(enable_cors).lower())

# Make sure everything is saved inside the environment file
# just before starting systemd unit
agent.dump_env()

# Save configuration to JSON for later use and backup
with open('config.json', 'w') as config_file:
    json.dump(data, config_file, indent=2)

# Find default traefik instance for current node
default_traefik_id = agent.resolve_agent_id('traefik@node')
if default_traefik_id is None:
    sys.exit(2)

# Configure Traefik route by calling the traefik agent
route_data = {
    'instance': os.environ['MODULE_ID'],
    'url': f'http://127.0.0.1:{port}',
    'host': host,
    'lets_encrypt': lets_encrypt,
    'http2https': http2https,
}

if path:
    route_data['path'] = path

response = agent.tasks.run(
    agent_id=default_traefik_id,
    action='set-route',
    data=route_data,
)

# Check if traefik configuration has been successful
agent.assert_exp(response['exit_code'] == 0)
