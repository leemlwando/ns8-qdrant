#!/usr/bin/env python3

#
# Copyright (C) 2023 Nethesis S.r.l.
# SPDX-License-Identifier: GPL-3.0-or-later
#

import json
import sys
import agent
import agent.tasks
import os

request = json.load(sys.stdin)
api_key = request.get("ApiKey", "")
enable_web_ui = request.get("EnableWebUI", True)
https_enabled = request.get("HttpsEnabled", True)
custom_path = request.get("CustomPath", "/qdrant")
custom_host = request.get("CustomHost", "")
lets_encrypt = request.get("LetsEncrypt", False)

# Always create the qdrant.env file
env_file_path = os.path.join(os.environ["STATE_DIR"], "qdrant.env")
with open(env_file_path, "w") as f:
    if api_key:
        f.write(f"QDRANT__SERVICE__API_KEY={api_key}\n")
    else:
        f.write("# No API key configured\n")
    
    # Configure web UI
    if enable_web_ui:
        f.write("QDRANT__WEB_UI__ENABLED=true\n")
    else:
        f.write("QDRANT__WEB_UI__ENABLED=false\n")

# Save configuration for later retrieval
config_file_path = os.path.join(os.environ["STATE_DIR"], "config.json")
config = {
    "ApiKey": api_key,
    "EnableWebUI": enable_web_ui,
    "HttpsEnabled": https_enabled,
    "CustomPath": custom_path,
    "CustomHost": custom_host,
    "LetsEncrypt": lets_encrypt
}
with open(config_file_path, "w") as f:
    json.dump(config, f)

# Configure Traefik to route requests to the qdrant service
traefik_data = {
    'instance': os.environ['MODULE_ID'],
    'url': 'http://127.0.0.1:' + os.environ["TCP_PORT"],
    'http2https': https_enabled,
    'lets_encrypt': lets_encrypt,
}

# Use custom host if provided, otherwise use path-based routing
if custom_host:
    traefik_data['host'] = custom_host
else:
    traefik_data['path'] = custom_path
response = agent.tasks.run(
    agent_id=agent.resolve_agent_id('traefik@node'),
    action='set-route',
    data=traefik_data,
)

# Check if traefik configuration has been successfull
agent.assert_exp(response['exit_code'] == 0)
