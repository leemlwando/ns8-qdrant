#!/usr/bin/env python3

#
# Copyright (C) 2023 Nethesis S.r.l.
# SPDX-License-Identifier: GPL-3.0-or-later
#

import json
import sys
import agent
import agent.tasks
import os

request = json.load(sys.stdin)
api_key = request.get("ApiKey", "")
enable_web_ui = request.get("EnableWebUI", True)
https_enabled = request.get("HttpsEnabled", True)
custom_path = request.get("CustomPath", "/qdrant")
custom_host = request.get("CustomHost", "")
lets_encrypt = request.get("LetsEncrypt", False)

# Set environment variables for configuration (NS8 best practice)
agent.set_env("QDRANT_API_KEY", api_key)
agent.set_env("QDRANT_ENABLE_WEB_UI", str(enable_web_ui).lower())
agent.set_env("QDRANT_HTTPS_ENABLED", str(https_enabled).lower())
agent.set_env("QDRANT_CUSTOM_PATH", custom_path)
agent.set_env("QDRANT_CUSTOM_HOST", custom_host)
agent.set_env("QDRANT_LETS_ENCRYPT", str(lets_encrypt).lower())

# Create the qdrant.env file using NS8 agent library
qdrant_env = {}
if api_key:
    qdrant_env["QDRANT__SERVICE__API_KEY"] = api_key

# Configure web UI
if enable_web_ui:
    qdrant_env["QDRANT__WEB_UI__ENABLED"] = "true"
else:
    qdrant_env["QDRANT__WEB_UI__ENABLED"] = "false"

agent.write_envfile("qdrant.env", qdrant_env)

# Configure Traefik to route requests to the qdrant service
traefik_data = {
    'instance': os.environ['MODULE_ID'],
    'url': 'http://127.0.0.1:' + os.environ["TCP_PORT"],
    'http2https': https_enabled,
    'lets_encrypt': lets_encrypt,
}

# Use custom host if provided, otherwise use path-based routing
if custom_host:
    traefik_data['host'] = custom_host
else:
    traefik_data['path'] = custom_path

response = agent.tasks.run(
    agent_id=agent.resolve_agent_id('traefik@node'),
    action='set-route',
    data=traefik_data,
)

# Check if traefik configuration has been successfull
agent.assert_exp(response['exit_code'] == 0)
