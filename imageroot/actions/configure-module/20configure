#!/usr/bin/env python3

#
# Copyright (C) 2025 Lee M. Lwando
# SPDX-License-Identifier: GPL-3.0-or-later
#

import json
import sys
import agent
import agent.tasks
import os

request = json.load(sys.stdin)

# Get the dynamically allocated host ports
host_http_port = os.environ['TCP_PORT']
host_grpc_port = os.environ['TCP_PORT_2']

# Container ports are fixed
container_http_port = 6333
container_grpc_port = 6334

# Extract other configuration parameters
api_key = request.get('api_key', '')
log_level = request.get('log_level', 'INFO')
storage_path = request.get('storage_path', './data')

# Set environment variables
agent.set_env('LOG_LEVEL', log_level)
agent.set_env('STORAGE_PATH', storage_path)
if api_key:
    agent.set_env('API_KEY', api_key)
else:
    agent.unset_env('API_KEY')

# Create Qdrant configuration file using container ports
qdrant_config_yaml = f"""log_level: {log_level}
storage:
  storage_path: {storage_path}
  snapshots_path: ./snapshots
service:
  http_port: {container_http_port}
  grpc_port: {container_grpc_port}
  enable_cors: true
"""
if api_key:
    qdrant_config_yaml += f"\n  api_key: \"{api_key}\""

# Write configuration file
os.makedirs('config', exist_ok=True)
with open('config/production.yaml', 'w') as f:
    f.write(qdrant_config_yaml)

# Store module configuration for get-configuration action, using host ports
module_config = {
    'http_port': host_http_port,
    'grpc_port': host_grpc_port,
    'api_key': api_key,
    'log_level': log_level,
    'storage_path': storage_path
}

with open('config/module_config.json', 'w') as f:
    json.dump(module_config, f, indent=2)

# Configure Traefik to use the allocated host HTTP port
response = agent.tasks.run(
    agent_id=agent.resolve_agent_id('traefik@node'),
    action='set-route',
    data={
        'instance': os.environ['MODULE_ID'],
        'url': f'http://127.0.0.1:{host_http_port}',
        'path': '/qdrant',
    },
)

agent.assert_exp(response['exit_code'] == 0)
