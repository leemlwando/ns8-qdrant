#!/usr/bin/env python3

import json
import sys
import subprocess
import requests
import os

def get_systemd_status():
    """Get systemd service status"""
    try:
        result = subprocess.run(
            ['systemctl', '--user', 'is-active', 'qdrant'],
            capture_output=True, text=True
        )
        status = result.stdout.strip()
        
        # Get uptime if service is active
        uptime = None
        if status == 'active':
            try:
                uptime_result = subprocess.run(
                    ['systemctl', '--user', 'show', 'qdrant', '--property=ActiveEnterTimestamp'],
                    capture_output=True, text=True
                )
                # Parse uptime (simplified - would need proper timestamp parsing in production)
                uptime = 0
            except:
                pass
        
        return {
            "status": status,
            "uptime": uptime
        }
    except subprocess.CalledProcessError:
        return {
            "status": "unknown",
            "uptime": None
        }

def get_qdrant_info():
    """Get Qdrant-specific information"""
    try:
        # Read config to get port and API key
        config_file = os.environ.get('AGENT_STATE_DIR', '.') + '/config.json'
        config = {}
        try:
            with open(config_file, 'r') as f:
                config = json.load(f)
        except FileNotFoundError:
            pass
        
        port = config.get('port', 6333)
        api_key = config.get('api_key', '')
        
        headers = {}
        if api_key:
            headers['Authorization'] = f'Bearer {api_key}'
        
        # Get cluster info
        response = requests.get(
            f'http://localhost:{port}/cluster',
            headers=headers,
            timeout=5
        )
        
        if response.status_code == 200:
            cluster_info = response.json()
            
            # Get collections info
            collections_response = requests.get(
                f'http://localhost:{port}/collections',
                headers=headers,
                timeout=5
            )
            
            collections_count = 0
            total_points = 0
            
            if collections_response.status_code == 200:
                collections_data = collections_response.json()
                collections = collections_data.get('result', {}).get('collections', [])
                collections_count = len(collections)
                
                # Sum up points from all collections
                for collection in collections:
                    total_points += collection.get('points_count', 0)
            
            return {
                "version": cluster_info.get('result', {}).get('version', 'unknown'),
                "collections_count": collections_count,
                "total_points": total_points
            }
    except Exception as e:
        return None

# Get status information
systemd_status = get_systemd_status()
qdrant_info = get_qdrant_info()

status = {
    **systemd_status,
    "qdrant_info": qdrant_info
}

json.dump(status, fp=sys.stdout)
