#!/usr/bin/env python3

import json
import sys
import os
import subprocess

# Initialize module on first creation
data = json.load(sys.stdin)

# Set default configuration
default_config = {
    "host": "",
    "path": "",
    "lets_encrypt": False,
    "http2https": False,
    "port": 6333,
    "api_key": "",
    "collection_size_limit": 10000,
    "enable_cors": True
}

# Save default configuration
config_file = os.environ.get('AGENT_STATE_DIR', '.') + '/config.json'
with open(config_file, 'w') as f:
    json.dump(default_config, f, indent=2)

# Create environment file with default values
env_file = os.environ.get('AGENT_STATE_DIR', '.') + '/environment'
with open(env_file, 'w') as f:
    f.write(f"QDRANT_PORT={default_config['port']}\n")
    f.write(f"QDRANT_GRPC_PORT=6334\n")
    f.write(f"QDRANT_COLLECTION_SIZE_LIMIT={default_config['collection_size_limit']}\n")
    f.write(f"QDRANT_ENABLE_CORS={'true' if default_config['enable_cors'] else 'false'}\n")
    f.write(f"QDRANT_IMAGE=docker.io/qdrant/qdrant:latest\n")

# Pull Qdrant image during module creation
try:
    print("Pulling Qdrant image...", file=sys.stderr)
    subprocess.run(['podman', 'pull', 'docker.io/qdrant/qdrant:latest'], check=True)
    print("Qdrant image pulled successfully", file=sys.stderr)
except subprocess.CalledProcessError as e:
    print(f"Warning: Failed to pull Qdrant image: {e}", file=sys.stderr)

# Create data volume for Qdrant storage
try:
    print("Creating Qdrant data volume...", file=sys.stderr)
    subprocess.run(['podman', 'volume', 'create', 'qdrant-data'], check=False)
    print("Qdrant data volume created", file=sys.stderr)
except Exception as e:
    print(f"Warning: Failed to create data volume: {e}", file=sys.stderr)

print("Module initialized successfully")
